buildscript
{
	repositories
	{
		mavenCentral()
		maven { url 'https://repo.spring.io/milestone' }
	}
	dependencies
	{
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins
{
	id 'java-library'
	id 'eclipse'
	id 'project-report'
	id 'io.spring.dependency-management' version '1.1.0'
	//id 'com.ewerk.gradle.plugins.jaxb2' version '1.0.10'
	id 'com.github.ben-manes.versions' version '0.47.0' // 0.46.0, 0.45.0
	id 'org.owasp.dependencycheck' version '8.2.1' //8.3.1, 8.2.0, 8.1.2, 8.1.0 https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/index.html
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	//maven { url 'https://dl.bintray.com/sbuettner/maven' }
}

dependencyManagement
{
	dependencies
	{
		imports {mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")}
		imports {mavenBom("org.springframework.data:spring-data-bom:${springDataVersion}")}
	}
}

dependencies {

	api('org.springframework.boot:spring-boot-starter')
	api("com.google.guava:guava:${property('guava.version')}")
	api("org.springframework.boot:spring-boot")
	api("org.springframework.data:spring-data-rest-webmvc")
	//api("javax.validation:validation-api")
	//api("jakarta.validation:validation-api")
	
	implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
	
	api("com.fasterxml.jackson.core:jackson-core")
	api("com.fasterxml.jackson.core:jackson-annotations")
	api("com.fasterxml.jackson.core:jackson-databind")
	
	api("org.apache.poi:poi:${property('poi.version')}")
	api("org.apache.poi:poi-ooxml:${property('poi.version')}")
	api("org.apache.poi:poi-ooxml-full:${property('poi.version')}")//v 5.1	
	api("org.apache.poi:poi-scratchpad:${property('poi.version')}")
	api("org.apache.poi:ooxml-security:1.1")
	
	api("org.mongodb:mongodb-driver-core:${property('mongodb.version')}")
	api("org.mongodb:mongodb-driver-sync:${property('mongodb.version')}")
	
	//https://www.baeldung.com/lombok-ide
	//https://projectlombok.org/setup/gradle
	compileOnly("org.projectlombok:lombok:${property('lombok.version')}")//compileOnly
	annotationProcessor("org.projectlombok:lombok:${property('lombok.version')}")
	
	api("javax.xml.bind:jaxb-api:${property('javax-xml-bind.version')}")
	
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation("org.junit.jupiter:junit-jupiter-api:${property('junit-jupiter.version')}")
	testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${property('junit-jupiter.version')}")
	
	///////////////////////////////
	// spring
	api("org.springframework.boot:spring-boot-starter-mail")
	testImplementation("org.springframework.boot:spring-boot-starter-test"){
		exclude(module: "commons-logging")
	}
	api("org.springframework.boot:spring-boot-configuration-processor")
	api("org.springframework.boot:spring-boot-starter-cache")

	// general utilities
	api("org.apache.commons:commons-lang3:${property('commons.lang.version')}")
	api("org.apache.commons:commons-exec:${property('commons.exec.version')}")
	api("org.zeroturnaround:zt-exec:${property('ztexec.version')}")
	api("org.zeroturnaround:zt-process-killer:${property('ztprocesskiller.version')}")
		
	api("commons-io:commons-io:${property('commons.io.version')}")
	api("com.google.guava:guava:${property('guava.version')}")
	//api("org.hibernate.validator:hibernate-validator")
	api("org.hibernate.validator:hibernate-validator:8.0.0.Final")
	
	// zip files
	api("net.lingala.zip4j:zip4j:${property('zip4j.version')}")
	api("com.jcraft:jzlib:${property('jzlib.version')}")	
	
	// networking
	api("com.hierynomus:sshj:${property('sshj.version')}"){
		//exclude(group: "org.bouncycastle")
	}
	api("org.apache.httpcomponents:httpclient:${property('httpclient.version')}");
	api("org.apache.httpcomponents:fluent-hc:${property('httpclient.version')}");
	
	// json
	api("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${property('jackson.version')}")
	api("com.fasterxml.jackson.dataformat:jackson-dataformat-csv:${property('jackson.version')}")
	api("com.fasterxml.jackson.dataformat:jackson-dataformat-properties:${property('jackson.version')}")
	api("com.github.bohnman:squiggly-filter-jackson:${property('squiggly.version')}")
	
	// encoding
	api("com.ibm.icu:icu4j:${property('icu4j.version')}")
	api("com.atilika.kuromoji:kuromoji-ipadic:${property('kuromoji.version')}")
	api("com.googlecode.juniversalchardet:juniversalchardet:${property('juniversalchardet.version')}")
	
	// csv parsers	
	api("com.googlecode.jcsv:jcsv:${property('jcsv.version')}")

	//api("org.docx4j:docx4j-core:${property('docx4j.version')}")
	/*
	api("org.docx4j:docx4j:${property('docx4j.version')}"){
		exclude(module: "log4j")
		exclude(module: "slf4j-log4j12")
		exclude(module: "commons-logging")
		exclude(module: "batik-js")
	}
	*/
	// pdf
	api("com.itextpdf:itextpdf:${property('itext.version')}")
	api("com.itextpdf:itext-asian:${property('itext.asian.version')}")
	//api("org.apache.pdfbox:pdfbox:${property('pdfbox.version')}")

	// javascript
	api("org.eclipse.birt.runtime:org.mozilla.javascript:${property('javascript.version')}")
	
	// barcode scanner
	api("com.google.zxing:javase:${property('zxing.version')}"){
		exclude(module: "jcommander")
	}
	
	// template engines
	api("com.github.spullara.mustache.java:compiler:${property('mustache.version')}")
	
	// xml parser
	api("org.dom4j:dom4j:${property('org-dom4j.version')}")
	api("jaxen:jaxen:${property('jaxen.version')}"){
		exclude(module: "xmlParserAPIs")
	}
	
	// html parsers
	api("org.jsoup:jsoup:${property('jsoup.version')}")
	api("net.sourceforge.htmlunit:htmlunit:${property('htmlunit.version')}")
	
	// image manipulation
	api("org.im4java:im4java:${property('im4java.version')}")
	
	// email
	//api("com.sendgrid:sendgrid-java:${property('sendgrid.version')}")
	
	// jpa
	api("org.springframework.boot:spring-boot-starter-data-jpa")
	runtimeOnly("org.postgresql:postgresql:${property('postgresql.version')}")
	api("com.healthmarketscience.jackcess:jackcess:${property('jackcess.version')}")
	
	// mongodb
	api("org.springframework.boot:spring-boot-starter-data-mongodb")
	
	// solr
	api("org.apache.solr:solr-solrj:${property('solr.version')}")
	//api("org.apache.tika:tika-parsers:${property('tika.version')}")
	//api("org.apache.tika:tika-core:${property('tika.version')}")
	//api("org.apache.tika:tika-parsers:${property('tika.version')}")
	//api('org.apache.tika:tika-core:2.0.0')
	//api('org.apache.tika:tika-parsers:2.0.0')
	api("org.apache.tika:tika-core:${property('tika.version')}")
	api("org.apache.tika:tika-parsers-standard-package:${property('tika.version')}")
	
	// web
	api("org.springframework.boot:spring-boot-starter-freemarker")
	//api('org.springframework.boot:spring-boot-starter-actuator')
	api('org.springframework.boot:spring-boot-starter-web')
	api("org.springframework.boot:spring-boot-starter-websocket")

	// users	
	api("org.springframework.boot:spring-boot-starter-security")
	api("org.passay:passay:${property('passay.version')}")

	// google
	api("com.google.api-client:google-api-client:${property('google-api-client.version')}")
	api("com.google.oauth-client:google-oauth-client-jetty:${property('google-oauth-client-jetty.version')}")
	api("com.google.apis:google-api-services-sheets:${property('google-api-services-sheets.version')}")
	
//	api('com.google.api-client:google-api-client:1.30.4')
//	api('com.google.oauth-client:google-oauth-client-jetty:1.30.6')
//	api('com.google.apis:google-api-services-sheets:v4-rev581-1.25.0')

	//api('org.owasp:dependency-check-gradle:8.1.0')
}

//version = '0.1.0'
group = 'org.biobrief'

sourceCompatibility = 1.17
targetCompatibility = 1.17

apply plugin: 'org.owasp.dependencycheck'

tasks.withType(JavaCompile)
{
	options.encoding = 'UTF-8'
}

	
tasks.named('jar') {
    manifest {
        attributes('Implementation-Title': project.name,
                   'Implementation-Version': project.version)
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
