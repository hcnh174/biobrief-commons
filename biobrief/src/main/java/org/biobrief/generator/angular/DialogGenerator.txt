package org.biobrief.generator.angular;

import java.util.Map;

import org.apache.poi.ss.usermodel.Workbook;

import com.google.common.collect.Maps;

import org.biobrief.generator.GeneratorConstants.RenderMode;
import org.biobrief.dictionary.Dictionary;
import org.biobrief.generator.Util;
import org.biobrief.generator.templates.Dialog;
import org.biobrief.generator.templates.Dialog.DialogParams;
import org.biobrief.generator.templates.ExcelTemplate;
import org.biobrief.util.CException;
import org.biobrief.util.MessageWriter;

public class DialogGenerator extends AbstractLayoutGenerator
{
	private final Map<String, PrimeDialog> dialogs=Maps.newLinkedHashMap();
	
	public static void generate(String dir, String tmpDir, Dictionary dictionary,
			RenderMode mode, boolean overwrite, MessageWriter writer)
	{
		DialogGenerator generator=new DialogGenerator(dir, tmpDir, dictionary, mode, overwrite, writer);
		generator.generate();
	}
	
	public static void generate(String name, String dir, String tmpDir, Dictionary dictionary,
			RenderMode mode, boolean overwrite, MessageWriter writer)
	{
		Util.checkName(name);
		DialogGenerator generator=new DialogGenerator(dir, tmpDir, dictionary, mode, overwrite, writer);
		generator.generate(dir+"/"+name+".xlsx");
	}
	
	//////////////////////////////////////////////////////
	
	protected DialogGenerator(String dir, String tmpDir, Dictionary dictionary, 
			RenderMode mode, boolean overwrite, MessageWriter writer)
	{
		super(dir, tmpDir, dictionary, mode, overwrite, writer);
	}
	
	protected void generate(Workbook workbook)
	{
		load(workbook);
		write();
	}
	
	protected void load(Workbook workbook)
	{
		Map<String, Object> params=loadDefaultParams(workbook);
		for (ExcelTemplate template : getTemplates(workbook))
		{
			if (template.getName().endsWith("-dialog"))
				addDialog(generateDialog(template, params));
			else throw new CException("unrecognized sheet name: "+template.getName());
		}
	}
	
	//////////////////////////////////////////////
	
	protected PrimeDialog generateDialog(ExcelTemplate template, Map<String, Object> params)
	{
		writer.println("generating dialog: "+template.getName());
		Dialog dialog=new Dialog(template, dictionary, new DialogParams(params));
		return new PrimeDialog(dialog);
	}
	
	////////////////////////////////////////////////////
	
	protected void addDialog(PrimeDialog dialog)
	{
		if (this.dialogs.containsKey(dialog.getName()))
			throw new CException("duplicate dialog name "+dialog.getName());
		this.dialogs.put(dialog.getName(), dialog);
	}
	
	////////////////////////////////////////////////////////
	
	protected void write()
	{
		for (PrimeDialog dialog : dialogs.values())
		{
			write(dialog);
		}
	}
	
	protected void write(PrimeDialog dialog)
	{
		if (mode==RenderMode.ANGULAR)
			writeAngular(dialog);
	}
	
	protected void writeAngular(PrimeDialog dialog)
	{
		String html=dialog.render(new RenderParams(mode));
		if (overwrite)
			overwriteFile(Util.ANGULAR_APP_DIRECTORY+"/"+dialog.getFilename(), html);
		else writeFile(Util.GENERATED_ANGULAR_DIRECTORY+"/"+dialog.getFilename(), html);
	}
}
