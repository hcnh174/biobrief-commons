package org.biobrief.generator.java;

import java.util.List;
import java.util.Map;

import org.biobrief.generator.AbstractGenerator;
import org.biobrief.generator.GeneratorProperties;
import org.biobrief.generator.Util;
import org.biobrief.generator.Util.FileType;
import org.biobrief.util.CException;
import org.biobrief.util.DataFrame;
import org.biobrief.util.FileHelper;
import org.biobrief.util.StringHelper;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

//https://www.baeldung.com/java-custom-annotation
public final class EnumCodeGenerator extends AbstractGenerator
{
	private static final String CONFIG_FILE="data/dictionary/enums.txt";
	private static final String CLASS_FILE="hlsg-util/src/main/java/org/hlsg/util/Constants.java";
		
	private Map<String, EnumBuilder> map=Maps.newLinkedHashMap();
	
	public static void generate(GeneratorProperties properties, boolean overwrite)
	{
		EnumCodeGenerator generator=new EnumCodeGenerator(properties);
		generator.build();
		String str=generator.generate();
		String text=FileHelper.readFile(CLASS_FILE);
		text=Util.insertText("ENUMS", text, str, "//", true);
		Util.replaceFile(FileType.CLASS, CLASS_FILE, text, overwrite, "config");
	}
	
	private EnumCodeGenerator(GeneratorProperties properties)
	{
		super(properties);
	}
	
	private void build()
	{
		DataFrame<String> dataframe=DataFrame.parseTabFile(CONFIG_FILE, new DataFrame.Options("type", "name"));
		for (String rowname : dataframe.getRowNames())
		{
			EnumBuilder builder=findOrCreateEnum(dataframe.getStringValue("type", rowname));
			Item item=builder.addItem(dataframe.getStringValue("name", rowname));
			item.setDisplay(dataframe.getStringValue("display", rowname));
			item.setGroup(dataframe.getStringValue("group", rowname));
			item.setDescription(dataframe.getStringValue("description", rowname));
		}
	}
	
	private String generate()
	{
		List<String> list=Lists.newArrayList();
		for (EnumBuilder builder : map.values())
		{
			list.add(builder.generate());
		}
		String str=StringHelper.join(list, "\n");
		return StringHelper.indent(str, 1);
	}
	
	private EnumBuilder findOrCreateEnum(String name)
	{
		if (!map.containsKey(name))
			map.put(name, new EnumBuilder(name));
		return map.get(name);
	}
	
	//////////////////////////////////////////////////////////
	
	public static class EnumBuilder
	{
		private final String type;
		private final List<Item> items=Lists.newArrayList();
		
		public EnumBuilder(String type)
		{
			this.type=type;
		}
		
		public Item addItem(String name)
		{
			Item item=new Item(name);
			this.items.add(item);
			return item;
		}
	
		public String generate()
		{
			if (this.items.isEmpty())
				throw new CException("enum has no items: "+StringHelper.toString(this));
			StringBuilder buffer=new StringBuilder();
			buffer.append("public enum ").append(type).append("\n");
			buffer.append("{\n");
			buffer.append(StringHelper.indent(generateContents(), 1)).append("\n");
			buffer.append("}\n");
			return buffer.toString();
		}
		
		public String generateContents()
		{
			String groupType=getGroupType();
			List<String> lines=Lists.newArrayList();
			lines.add(generateItems()+";");
			lines.add("");
			lines.add("private String display;");
			if (groupType!=null)
				lines.add("private "+groupType+" group;");
			lines.add(type+"(){}");
			if (groupType==null)
			{
				//lines.add(type+"(){}");
				lines.add(type+"(String display){this.display=display;}");
			}
			else
			{
				lines.add(type+"("+groupType+" group){this.group=group;}");
				lines.add(type+"("+groupType+" group, String display){this.group=group; this.display=display;}");
			}
			lines.add("public String getDisplay(){return display;}");
			if (groupType!=null)
				lines.add("public "+groupType+" getGroup(){return group;}");
			lines.add("@Override public String toString(){return StringHelper.toString(this, display);}");
			return StringHelper.join(lines, "\n");
		}
		
		private Item getNullItem()
		{
			return new Item("NULL");
		}
		
		private String generateItems()
		{
			List<String> list=Lists.newArrayList();
			list.add(getNullItem().generate());
			for (Item item : items)
			{
				list.add(item.generate());
			}
			//list.add(getNullItem().generate());
			return StringHelper.join(list, ",\n");
		}
		
		private String getGroupType()
		{
			String groupType=null;
			for (Item item : items)
			{
				if (item.getGroupType()!=null)
					groupType=item.getGroupType();
			}
			for (Item item : items)
			{
				item.groupType=groupType;
			}
			return groupType;
		}
	}
	
////////////////////////////////////////////////////////
	
	public static class Item
	{
		private final String name;
		private String display=null;
		private String group=null;
		private String description=null;
		private String groupType=null;
		
		public Item(String name)
		{
			this.name=name;
		}
		
		public void setDisplay(String display)
		{
			if (StringHelper.hasContent(display))
				this.display=display;
		}
		
		public void setGroup(String group)
		{
			if (StringHelper.hasContent(group))
				this.group=group;
		}
		
		public void setDescription(String description)
		{
			if (StringHelper.hasContent(description))
				this.description=description;
		}
		
		public String generate()
		{
			StringBuilder buffer=new StringBuilder();
			buffer.append(name).append(generateParams());
			return buffer.toString();
		}
		
		private String generateParams()
		{
			List<String> list=Lists.newArrayList();
			if (groupType!=null)
			{
				if (groupType.equals("String"))
				{
					if (StringHelper.hasContent(group))//!group.equals("null"))
						list.add(StringHelper.doubleQuote(group));
					else list.add("null");
				}					
				else list.add(group);
			}
			if (display!=null)
				list.add(StringHelper.doubleQuote(display));
			if (list.isEmpty())
				return "";
			return "("+StringHelper.join(list, ", ")+")";
		}
		
		private String getGroupType()
		{
			if (group==null || group.equals("null"))
				return null;
			if (group.contains("."))
				return group.substring(0, group.indexOf("."));
			else return "String";
		}
		
		public String getDescription(){return description;}
	}
}

